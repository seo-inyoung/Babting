{"ast":null,"code":"var regExpNbspEntity = /&nbsp;/gi;\nvar regExpNbspHex = /\\xA0/g;\nvar regExpSpaces = /\\s+([^\\s])/gm;\n/**\r\n * Collects the text content of a given element.\r\n * \r\n * @param node the element\r\n * @param trim whether to remove trailing whitespace chars\r\n * @param singleSpaces whether to convert multiple whitespace chars into a single space character\r\n */\n\nexport default function text(node, trim, singleSpaces) {\n  if (trim === void 0) {\n    trim = true;\n  }\n\n  if (singleSpaces === void 0) {\n    singleSpaces = true;\n  }\n\n  var elementText = '';\n\n  if (node) {\n    elementText = (node.textContent || '').replace(regExpNbspEntity, ' ').replace(regExpNbspHex, ' ');\n\n    if (trim) {\n      elementText = elementText.trim();\n    }\n\n    if (singleSpaces) {\n      elementText = elementText.replace(regExpSpaces, ' $1');\n    }\n  }\n\n  return elementText;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/inyoung/webprog/project/webproj222/client/node_modules/dom-helpers/esm/text.js"],"names":["regExpNbspEntity","regExpNbspHex","regExpSpaces","text","node","trim","singleSpaces","elementText","textContent","replace"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,UAAvB;AACA,IAAIC,aAAa,GAAG,OAApB;AACA,IAAIC,YAAY,GAAG,cAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0BC,YAA1B,EAAwC;AACrD,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,MAAIC,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAC3BA,IAAAA,YAAY,GAAG,IAAf;AACD;;AAED,MAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAIH,IAAJ,EAAU;AACRG,IAAAA,WAAW,GAAG,CAACH,IAAI,CAACI,WAAL,IAAoB,EAArB,EAAyBC,OAAzB,CAAiCT,gBAAjC,EAAmD,GAAnD,EAAwDS,OAAxD,CAAgER,aAAhE,EAA+E,GAA/E,CAAd;;AAEA,QAAII,IAAJ,EAAU;AACRE,MAAAA,WAAW,GAAGA,WAAW,CAACF,IAAZ,EAAd;AACD;;AAED,QAAIC,YAAJ,EAAkB;AAChBC,MAAAA,WAAW,GAAGA,WAAW,CAACE,OAAZ,CAAoBP,YAApB,EAAkC,KAAlC,CAAd;AACD;AACF;;AAED,SAAOK,WAAP;AACD","sourcesContent":["var regExpNbspEntity = /&nbsp;/gi;\r\nvar regExpNbspHex = /\\xA0/g;\r\nvar regExpSpaces = /\\s+([^\\s])/gm;\r\n/**\r\n * Collects the text content of a given element.\r\n * \r\n * @param node the element\r\n * @param trim whether to remove trailing whitespace chars\r\n * @param singleSpaces whether to convert multiple whitespace chars into a single space character\r\n */\r\n\r\nexport default function text(node, trim, singleSpaces) {\r\n  if (trim === void 0) {\r\n    trim = true;\r\n  }\r\n\r\n  if (singleSpaces === void 0) {\r\n    singleSpaces = true;\r\n  }\r\n\r\n  var elementText = '';\r\n\r\n  if (node) {\r\n    elementText = (node.textContent || '').replace(regExpNbspEntity, ' ').replace(regExpNbspHex, ' ');\r\n\r\n    if (trim) {\r\n      elementText = elementText.trim();\r\n    }\r\n\r\n    if (singleSpaces) {\r\n      elementText = elementText.replace(regExpSpaces, ' $1');\r\n    }\r\n  }\r\n\r\n  return elementText;\r\n}"]},"metadata":{},"sourceType":"module"}